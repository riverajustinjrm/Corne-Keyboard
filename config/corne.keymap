/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings =
        <&kp>,
        <&kp>;
    };
    new_behavior: new_behavior {
      compatible = "zmk,behavior-hold-tap";
      label = "NEW_BEHAVIOR";
      bindings =
        <&kp>,
        <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
    };
  };

  combos {
    compatible = "zmk,combos";

    tab {
      bindings = <&trans>;
      key-positions = <2 3>;
    };

    ctrl {
      bindings = <&kp LCTRL>;
      key-positions = <26 27>;
    };

    cmd {
      bindings = <&kp LCMD>;
      key-positions = <37 38>;
    };

    alt {
      bindings = <&kp LEFT_ALT>;
      key-positions = <39 40>;
    };

    shift {
      bindings = <&kp LSHIFT>;
      key-positions = <8 9>;
    };

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    delete {
      bindings = <&kp DEL>;
      key-positions = <32 33>;
    };
  };

  macros {
    zed_em_kay: zed_em_kay {
      compatible = "zmk,behavior-macro";
      label = "ZM_zed_em_kay";
      #binding-cells = <0>;
      bindings =
        <&macro_press>,
        <&kp LSHFT>,
        <&macro_tap>,
        <&kp Z &kp M &kp K>,
        <&macro_release>,
        <&kp LSHFT>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    raise {
      bindings = <
&none  &kp Y  &kp C           &kp L                         &kp M           &kp K        &kp Z            &kp F                           &kp U         &new_behavior COMMA MINUS  &kp Z  &none
&none  &kp I  &kp S  &hm R LEFT_ALT                &hm T LEFT_GUI           &kp G        &kp P  &hm N RIGHT_GUI                 &hm E RIGHT_ALT                             &kp A  &kp O  &none
&none  &kp Q  &kp V    &bt BT_SEL 0                         &kp D           &kp J        &kp B            &kp H  &new_behavior SLASH UNDERSCORE  &new_behavior PERIOD EXCLAMATION  &kp X  &none
                         &bt BT_CLR  &new_behavior SPACE NUMBER_0  &sk LEFT_SHIFT    &kp LCTRL           &tog 1                    &kp NUMBER_0
      >;
    };

    base {
      bindings = <
&kp N0        &kp ESC  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)      &kp SEMI  &kp BSPC   &kp N0
&kp N0        &kp TAB   &kp EQUAL        &kp SQT       &kp SQT        &kp SQT         &kp BSLH        &kp N0  &kp LS(RBRC)  &kp LS(PIPE)   &kp RET   &kp N0
&kp N0  &kp LS(TILDE)      &kp N0    &kp LS(DQT)   &kp LS(DQT)    &kp LS(DQT)         &kp LBKT  &kp LS(LPAR)  &kp LS(RPAR)        &kp N0    &kp N3  &kp ESC
                                          &kp N0        &kp N1      &kp LSHFT         &kp RALT        &kp N4        &kp N0
      >;
    };

    lower {
      bindings = <
&trans  &kp ESC  &kp N0  &kp N0  &kp N0     &kp Q    &kp CARET  &kp AMPS  &kp KP_MULTIPLY   &kp LPAR  &kp BSPC  &trans
&trans  &kp TAB  &trans  &trans  &trans  &kp BSPC     &kp LEFT  &kp DOWN           &kp UP  &kp RIGHT   &kp RET  &kp N0
&trans   &trans  &trans  &trans  &trans    &trans    &kp UNDER  &kp PLUS         &kp LBRC   &kp RBRC  &kp PIPE  &kp N0
                         &kp N0  &kp N1  &kp RGUI     &kp RALT    &kp N2           &trans
      >;
    };

    both {
      bindings = <
&trans  &trans        &trans  &trans   &trans  &bt BT_SEL 0    &bt BT_SEL 3  &kp N1  &kp N2  &kp N3  &kp BSPC  &kp N0
&trans  &trans        &trans  &trans   &trans  &bt BT_SEL 1    &bt BT_SEL 4  &kp N4  &kp N5  &kp N6   &kp RET  &kp N0
&trans  &trans  &kp LS(STAR)  &trans  &kp DOT  &bt BT_SEL 2          &kp N0  &kp N7  &kp N8  &kp N9    &kp N3  &kp N0
                              &trans   &kp N1      &kp LGUI        &kp RALT  &kp N2  &trans
      >;
    };
  };
};
