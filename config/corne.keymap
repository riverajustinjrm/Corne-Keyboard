/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings =
        <&kp>,
        <&kp>;
    };
    new_behavior: new_behavior {
      compatible = "zmk,behavior-hold-tap";
      label = "NEW_BEHAVIOR";
      bindings =
        <&kp>,
        <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
    };
  };

  combos {
    compatible = "zmk,combos";

    tab {
      bindings = <&trans>;
      key-positions = <2 3>;
    };

    ctrl {
      bindings = <&kp LCTRL>;
      key-positions = <26 27>;
    };

    cmd {
      bindings = <&kp LCMD>;
      key-positions = <37 38>;
    };

    alt {
      bindings = <&kp LEFT_ALT>;
      key-positions = <39 40>;
    };

    shift {
      bindings = <&kp LSHIFT>;
      key-positions = <8 9>;
    };

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    delete {
      bindings = <&kp DEL>;
      key-positions = <32 33>;
    };
  };

  macros {
    zed_em_kay: zed_em_kay {
      compatible = "zmk,behavior-macro";
      label = "ZM_zed_em_kay";
      #binding-cells = <0>;
      bindings =
        <&macro_press>,
        <&kp LSHFT>,
        <&macro_tap>,
        <&kp Z &kp M &kp K>,
        <&macro_release>,
        <&kp LSHFT>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    raise {
      bindings = <
&none  &kp Y  &kp C           &kp L               &kp M           &kp K        &kp Z            &kp F                                             &kp U         &new_behavior COMMA MINUS  &kp BACKSPACE  &none
&none  &kp I  &kp S  &hm R LEFT_ALT  &hm T LEFT_COMMAND           &kp G        &kp P  &hm N RIGHT_GUI                                   &hm E RIGHT_ALT                             &kp A          &kp O  &none
&none  &kp Q  &kp V           &kp W               &kp D           &kp J        &kp B            &kp H                    &new_behavior SLASH UNDERSCORE  &new_behavior PERIOD EXCLAMATION          &kp X  &none
                         &caps_word           &kp SPACE  &sk LEFT_SHIFT    &kp LCTRL           &tog 1  &new_behavior LEFT_PARENTHESIS RIGHT_PARENTHESIS
      >;
    };

    base {
      bindings = <
&kp N0    &kp LS(ESC)    &kp LS(AT)      &kp LS(HASH)                 &kp LS(DOLLAR)  &kp LS(PRCNT)    &kp LS(CARET)        &kp LS(AMPS)  &kp LS(STAR)           &kp SEMI  &kp BSPC   &kp N0
&kp N0        &kp TAB     &kp EQUAL           &kp SQT                      &kp MINUS      &kp SLASH         &kp BSLH  &kp LS(LEFT_BRACE)  &kp LS(RBRC)       &kp LS(PIPE)   &kp RET   &kp N0
&kp N0  &kp LS(TILDE)  &kp QUESTION       &kp LS(DQT)  &new_behavior COLON SEMICOLON  &kp LS(GRAVE)         &kp LBKT        &kp LS(LPAR)  &kp LS(RPAR)  &kp RIGHT_BRACKET    &tog 3  &kp ESC
                                     &kp LEFT_COMMAND                         &tog 0      &kp LSHFT         &kp RALT              &tog 2     &kp SPACE
      >;
    };

    both {
      bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4                           &kp ASTERISK  &kp N1        &kp N2  &kp N3  &kp BSPC  &kp N0
&trans       &kp TAB         &kp W     &kp SLASH  &kp LS(CARET)  &kp LS(PLUS)                              &kp EQUAL  &kp N4        &kp N5  &kp N6   &kp RET  &kp N0
&trans      &kp LEFT     &kp RIGHT        &kp UP       &kp DOWN     &kp MINUS    &new_behavior LEFT_PARENTHESIS RPAR  &kp N7        &kp N8  &kp N9  &kp PIPE  &kp N0
                                      &bt BT_CLR      &kp SPACE  &kp LEFT_ALT                       &kp LEFT_CONTROL  &tog 0  &kp NUMBER_0
      >;
    };

    layer_3 {
      bindings = <
&trans  &tog 0  &tog 1  &tog 2  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };
  };
};
